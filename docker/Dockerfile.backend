# syntax=docker/dockerfile:1
FROM python:3.12-slim AS base
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1
WORKDIR /app

# Build stage
FROM base AS build
RUN apt-get update && apt-get install -y --no-install-recommends build-essential && rm -rf /var/lib/apt/lists/*
COPY requirements-runtime.txt ./requirements.txt
RUN pip wheel --no-cache-dir --wheel-dir /wheels -r requirements.txt

# Runtime stage
 FROM base AS runtime
 RUN addgroup --system app && adduser --system --ingroup app app
COPY --from=build /wheels /wheels
COPY --from=build /app/requirements.txt /app/requirements.txt
# Debug: list wheels to ensure theyâ€™re present
RUN set -eux; \
    ls -lah /wheels; \
    python -m pip install --no-cache-dir --no-index --find-links=/wheels -r /app/requirements.txt \
    || (echo "Offline install failed, falling back to online install..." >&2; \
        python -m pip install --no-cache-dir -r /app/requirements.txt)


# Install Nmap and set capabilities for raw socket access
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends nmap libcap2-bin; \
    setcap cap_net_raw,cap_net_admin,cap_net_bind_service+eip "$(command -v nmap)"; \
    (nmap --version || true); \
    rm -rf /var/lib/apt/lists/*

COPY backend/ /app/backend/

# Ensure runtime directories exist and are writable before dropping privileges
RUN set -eux; \
    mkdir -p /app/data /data/outputs; \
    chown -R app:app /app /data

USER app
EXPOSE 8000
CMD gunicorn -k uvicorn.workers.UvicornWorker backend.main:app --bind 0.0.0.0:8000 --workers 2

